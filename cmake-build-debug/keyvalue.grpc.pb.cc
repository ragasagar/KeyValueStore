// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvalue.proto

#include "keyvalue.pb.h"
#include "keyvalue.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace keyvaluestore {

static const char* KeyValueStore_method_names[] = {
  "/keyvaluestore.KeyValueStore/GetValues",
  "/keyvaluestore.KeyValueStore/PutValues",
  "/keyvaluestore.KeyValueStore/DelValue",
};

std::unique_ptr< KeyValueStore::Stub> KeyValueStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyValueStore::Stub> stub(new KeyValueStore::Stub(channel, options));
  return stub;
}

KeyValueStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetValues_(KeyValueStore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_PutValues_(KeyValueStore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DelValue_(KeyValueStore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::GetValuesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), rpcmethod_GetValues_, context);
}

void KeyValueStore::Stub::async::GetValues(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::keyvaluestore::Request,::keyvaluestore::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::keyvaluestore::Request,::keyvaluestore::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_GetValues_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::AsyncGetValuesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), cq, rpcmethod_GetValues_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::PrepareAsyncGetValuesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), cq, rpcmethod_GetValues_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::PutValuesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), rpcmethod_PutValues_, context);
}

void KeyValueStore::Stub::async::PutValues(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::keyvaluestore::Request,::keyvaluestore::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::keyvaluestore::Request,::keyvaluestore::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_PutValues_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::AsyncPutValuesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), cq, rpcmethod_PutValues_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::PrepareAsyncPutValuesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), cq, rpcmethod_PutValues_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::DelValueRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), rpcmethod_DelValue_, context);
}

void KeyValueStore::Stub::async::DelValue(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::keyvaluestore::Request,::keyvaluestore::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::keyvaluestore::Request,::keyvaluestore::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_DelValue_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::AsyncDelValueRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), cq, rpcmethod_DelValue_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::keyvaluestore::Request, ::keyvaluestore::Response>* KeyValueStore::Stub::PrepareAsyncDelValueRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::keyvaluestore::Request, ::keyvaluestore::Response>::Create(channel_.get(), cq, rpcmethod_DelValue_, context, false, nullptr);
}

KeyValueStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< KeyValueStore::Service, ::keyvaluestore::Request, ::keyvaluestore::Response>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::keyvaluestore::Response,
             ::keyvaluestore::Request>* stream) {
               return service->GetValues(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< KeyValueStore::Service, ::keyvaluestore::Request, ::keyvaluestore::Response>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::keyvaluestore::Response,
             ::keyvaluestore::Request>* stream) {
               return service->PutValues(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyValueStore_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< KeyValueStore::Service, ::keyvaluestore::Request, ::keyvaluestore::Response>(
          [](KeyValueStore::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::keyvaluestore::Response,
             ::keyvaluestore::Request>* stream) {
               return service->DelValue(ctx, stream);
             }, this)));
}

KeyValueStore::Service::~Service() {
}

::grpc::Status KeyValueStore::Service::GetValues(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::keyvaluestore::Response, ::keyvaluestore::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::PutValues(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::keyvaluestore::Response, ::keyvaluestore::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeyValueStore::Service::DelValue(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::keyvaluestore::Response, ::keyvaluestore::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace keyvaluestore

