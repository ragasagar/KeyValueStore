// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvalue.proto
#ifndef GRPC_keyvalue_2eproto__INCLUDED
#define GRPC_keyvalue_2eproto__INCLUDED

#include "keyvalue.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace keyvaluestore {

// A simple key-value storage service
    class KeyValueStore final {
    public:
        static constexpr char const *service_full_name() {
            return "keyvaluestore.KeyValueStore";
        }

        class StubInterface {
        public:
            virtual ~StubInterface() {}

            // Provides a value for each key request
            std::unique_ptr<::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            GetValues(::grpc::ClientContext *context) {
                return std::unique_ptr<::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        GetValuesRaw(context));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            AsyncGetValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        AsyncGetValuesRaw(context, cq, tag));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PrepareAsyncGetValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PrepareAsyncGetValuesRaw(context, cq));
            }

            std::unique_ptr<::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PutValues(::grpc::ClientContext *context) {
                return std::unique_ptr<::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PutValuesRaw(context));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            AsyncPutValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        AsyncPutValuesRaw(context, cq, tag));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PrepareAsyncPutValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PrepareAsyncPutValuesRaw(context, cq));
            }

            std::unique_ptr<::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            DelValue(::grpc::ClientContext *context) {
                return std::unique_ptr<::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        DelValueRaw(context));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            AsyncDelValue(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        AsyncDelValueRaw(context, cq, tag));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PrepareAsyncDelValue(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PrepareAsyncDelValueRaw(context, cq));
            }

            class async_interface {
            public:
                virtual ~async_interface() {}

                // Provides a value for each key request
                virtual void GetValues(::grpc::ClientContext *context,
                                       ::grpc::ClientBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *reactor) = 0;

                virtual void PutValues(::grpc::ClientContext *context,
                                       ::grpc::ClientBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *reactor) = 0;

                virtual void DelValue(::grpc::ClientContext *context,
                                      ::grpc::ClientBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *reactor) = 0;
            };

            typedef class async_interface experimental_async_interface;

            virtual class async_interface *async() { return nullptr; }

            class async_interface *experimental_async() { return async(); }

        private:
            virtual ::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            GetValuesRaw(::grpc::ClientContext *context) = 0;

            virtual ::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            AsyncGetValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) = 0;

            virtual ::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PrepareAsyncGetValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) = 0;

            virtual ::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PutValuesRaw(::grpc::ClientContext *context) = 0;

            virtual ::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            AsyncPutValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) = 0;

            virtual ::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PrepareAsyncPutValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) = 0;

            virtual ::grpc::ClientReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            DelValueRaw(::grpc::ClientContext *context) = 0;

            virtual ::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            AsyncDelValueRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) = 0;

            virtual ::grpc::ClientAsyncReaderWriterInterface<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PrepareAsyncDelValueRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) = 0;
        };

        class Stub final : public StubInterface {
        public:
            Stub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                 const ::grpc::StubOptions &options = ::grpc::StubOptions());

            std::unique_ptr<::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            GetValues(::grpc::ClientContext *context) {
                return std::unique_ptr<::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        GetValuesRaw(context));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            AsyncGetValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        AsyncGetValuesRaw(context, cq, tag));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PrepareAsyncGetValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PrepareAsyncGetValuesRaw(context, cq));
            }

            std::unique_ptr<::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PutValues(::grpc::ClientContext *context) {
                return std::unique_ptr<::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PutValuesRaw(context));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            AsyncPutValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        AsyncPutValuesRaw(context, cq, tag));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PrepareAsyncPutValues(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PrepareAsyncPutValuesRaw(context, cq));
            }

            std::unique_ptr<::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            DelValue(::grpc::ClientContext *context) {
                return std::unique_ptr<::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        DelValueRaw(context));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            AsyncDelValue(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        AsyncDelValueRaw(context, cq, tag));
            }

            std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>
            PrepareAsyncDelValue(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) {
                return std::unique_ptr<::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response>>(
                        PrepareAsyncDelValueRaw(context, cq));
            }

            class async final :
                    public StubInterface::async_interface {
            public:
                void GetValues(::grpc::ClientContext *context,
                               ::grpc::ClientBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *reactor) override;

                void PutValues(::grpc::ClientContext *context,
                               ::grpc::ClientBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *reactor) override;

                void DelValue(::grpc::ClientContext *context,
                              ::grpc::ClientBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *reactor) override;

            private:
                friend class Stub;

                explicit async(Stub *stub) : stub_(stub) {}

                Stub *stub() { return stub_; }

                Stub *stub_;
            };

            class async *async() override { return &async_stub_; }

        private:
            std::shared_ptr<::grpc::ChannelInterface> channel_;

            class async async_stub_{this};

            ::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            GetValuesRaw(::grpc::ClientContext *context) override;

            ::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            AsyncGetValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) override;

            ::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PrepareAsyncGetValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) override;

            ::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PutValuesRaw(::grpc::ClientContext *context) override;

            ::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            AsyncPutValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) override;

            ::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PrepareAsyncPutValuesRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) override;

            ::grpc::ClientReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            DelValueRaw(::grpc::ClientContext *context) override;

            ::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            AsyncDelValueRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq, void *tag) override;

            ::grpc::ClientAsyncReaderWriter<::keyvaluestore::Request, ::keyvaluestore::Response> *
            PrepareAsyncDelValueRaw(::grpc::ClientContext *context, ::grpc::CompletionQueue *cq) override;

            const ::grpc::internal::RpcMethod rpcmethod_GetValues_;
            const ::grpc::internal::RpcMethod rpcmethod_PutValues_;
            const ::grpc::internal::RpcMethod rpcmethod_DelValue_;
        };

        static std::unique_ptr<Stub> NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                                             const ::grpc::StubOptions &options = ::grpc::StubOptions());

        class Service : public ::grpc::Service {
        public:
            Service();

            virtual ~Service();

            // Provides a value for each key request
            virtual ::grpc::Status GetValues(::grpc::ServerContext *context,
                                             ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> *stream);

            virtual ::grpc::Status PutValues(::grpc::ServerContext *context,
                                             ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> *stream);

            virtual ::grpc::Status DelValue(::grpc::ServerContext *context,
                                            ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> *stream);
        };

        template<class BaseClass>
        class WithAsyncMethod_GetValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithAsyncMethod_GetValues() {
                ::grpc::Service::MarkMethodAsync(0);
            }

            ~WithAsyncMethod_GetValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status GetValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestGetValues(::grpc::ServerContext *context,
                                  ::grpc::ServerAsyncReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> *stream,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithAsyncMethod_PutValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithAsyncMethod_PutValues() {
                ::grpc::Service::MarkMethodAsync(1);
            }

            ~WithAsyncMethod_PutValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status PutValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestPutValues(::grpc::ServerContext *context,
                                  ::grpc::ServerAsyncReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> *stream,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithAsyncMethod_DelValue : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithAsyncMethod_DelValue() {
                ::grpc::Service::MarkMethodAsync(2);
            }

            ~WithAsyncMethod_DelValue() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelValue(::grpc::ServerContext * /*context*/,
                                    ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestDelValue(::grpc::ServerContext *context,
                                 ::grpc::ServerAsyncReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> *stream,
                                 ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                 void *tag) {
                ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
            }
        };

        typedef WithAsyncMethod_GetValues<WithAsyncMethod_PutValues<WithAsyncMethod_DelValue<Service> > > AsyncService;

        template<class BaseClass>
        class WithCallbackMethod_GetValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithCallbackMethod_GetValues() {
                ::grpc::Service::MarkMethodCallback(0,
                                                    new ::grpc::internal::CallbackBidiHandler<::keyvaluestore::Request, ::keyvaluestore::Response>(
                                                            [this](
                                                                    ::grpc::CallbackServerContext *context) {
                                                                return this->GetValues(context);
                                                            }));
            }

            ~WithCallbackMethod_GetValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status GetValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *GetValues(
                    ::grpc::CallbackServerContext * /*context*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithCallbackMethod_PutValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithCallbackMethod_PutValues() {
                ::grpc::Service::MarkMethodCallback(1,
                                                    new ::grpc::internal::CallbackBidiHandler<::keyvaluestore::Request, ::keyvaluestore::Response>(
                                                            [this](
                                                                    ::grpc::CallbackServerContext *context) {
                                                                return this->PutValues(context);
                                                            }));
            }

            ~WithCallbackMethod_PutValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status PutValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *PutValues(
                    ::grpc::CallbackServerContext * /*context*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithCallbackMethod_DelValue : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithCallbackMethod_DelValue() {
                ::grpc::Service::MarkMethodCallback(2,
                                                    new ::grpc::internal::CallbackBidiHandler<::keyvaluestore::Request, ::keyvaluestore::Response>(
                                                            [this](
                                                                    ::grpc::CallbackServerContext *context) {
                                                                return this->DelValue(context);
                                                            }));
            }

            ~WithCallbackMethod_DelValue() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelValue(::grpc::ServerContext * /*context*/,
                                    ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerBidiReactor<::keyvaluestore::Request, ::keyvaluestore::Response> *DelValue(
                    ::grpc::CallbackServerContext * /*context*/) { return nullptr; }
        };

        typedef WithCallbackMethod_GetValues<WithCallbackMethod_PutValues<WithCallbackMethod_DelValue<Service> > > CallbackService;
        typedef CallbackService ExperimentalCallbackService;

        template<class BaseClass>
        class WithGenericMethod_GetValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithGenericMethod_GetValues() {
                ::grpc::Service::MarkMethodGeneric(0);
            }

            ~WithGenericMethod_GetValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status GetValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }
        };

        template<class BaseClass>
        class WithGenericMethod_PutValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithGenericMethod_PutValues() {
                ::grpc::Service::MarkMethodGeneric(1);
            }

            ~WithGenericMethod_PutValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status PutValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }
        };

        template<class BaseClass>
        class WithGenericMethod_DelValue : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithGenericMethod_DelValue() {
                ::grpc::Service::MarkMethodGeneric(2);
            }

            ~WithGenericMethod_DelValue() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelValue(::grpc::ServerContext * /*context*/,
                                    ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }
        };

        template<class BaseClass>
        class WithRawMethod_GetValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawMethod_GetValues() {
                ::grpc::Service::MarkMethodRaw(0);
            }

            ~WithRawMethod_GetValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status GetValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestGetValues(::grpc::ServerContext *context,
                                  ::grpc::ServerAsyncReaderWriter<::grpc::ByteBuffer, ::grpc::ByteBuffer> *stream,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithRawMethod_PutValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawMethod_PutValues() {
                ::grpc::Service::MarkMethodRaw(1);
            }

            ~WithRawMethod_PutValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status PutValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestPutValues(::grpc::ServerContext *context,
                                  ::grpc::ServerAsyncReaderWriter<::grpc::ByteBuffer, ::grpc::ByteBuffer> *stream,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithRawMethod_DelValue : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawMethod_DelValue() {
                ::grpc::Service::MarkMethodRaw(2);
            }

            ~WithRawMethod_DelValue() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelValue(::grpc::ServerContext * /*context*/,
                                    ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestDelValue(::grpc::ServerContext *context,
                                 ::grpc::ServerAsyncReaderWriter<::grpc::ByteBuffer, ::grpc::ByteBuffer> *stream,
                                 ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                 void *tag) {
                ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithRawCallbackMethod_GetValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawCallbackMethod_GetValues() {
                ::grpc::Service::MarkMethodRawCallback(0,
                                                       new ::grpc::internal::CallbackBidiHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                                                               [this](
                                                                       ::grpc::CallbackServerContext *context) {
                                                                   return this->GetValues(context);
                                                               }));
            }

            ~WithRawCallbackMethod_GetValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status GetValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerBidiReactor<::grpc::ByteBuffer, ::grpc::ByteBuffer> *GetValues(
                    ::grpc::CallbackServerContext * /*context*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithRawCallbackMethod_PutValues : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawCallbackMethod_PutValues() {
                ::grpc::Service::MarkMethodRawCallback(1,
                                                       new ::grpc::internal::CallbackBidiHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                                                               [this](
                                                                       ::grpc::CallbackServerContext *context) {
                                                                   return this->PutValues(context);
                                                               }));
            }

            ~WithRawCallbackMethod_PutValues() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status PutValues(::grpc::ServerContext * /*context*/,
                                     ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerBidiReactor<::grpc::ByteBuffer, ::grpc::ByteBuffer> *PutValues(
                    ::grpc::CallbackServerContext * /*context*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithRawCallbackMethod_DelValue : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawCallbackMethod_DelValue() {
                ::grpc::Service::MarkMethodRawCallback(2,
                                                       new ::grpc::internal::CallbackBidiHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                                                               [this](
                                                                       ::grpc::CallbackServerContext *context) {
                                                                   return this->DelValue(context);
                                                               }));
            }

            ~WithRawCallbackMethod_DelValue() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelValue(::grpc::ServerContext * /*context*/,
                                    ::grpc::ServerReaderWriter<::keyvaluestore::Response, ::keyvaluestore::Request> * /*stream*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerBidiReactor<::grpc::ByteBuffer, ::grpc::ByteBuffer> *DelValue(
                    ::grpc::CallbackServerContext * /*context*/) { return nullptr; }
        };

        typedef Service StreamedUnaryService;
        typedef Service SplitStreamedService;
        typedef Service StreamedService;
    };

}  // namespace keyvaluestore


#endif  // GRPC_keyvalue_2eproto__INCLUDED
